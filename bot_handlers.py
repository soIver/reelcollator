from data_provider import DataProvider
from bot import bot
from PIL import Image
import io, re

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile, BufferedInputFile, InputMediaPhoto
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.fsm.context import FSMContext

import datetime, traceback

PARAMETER_TRANSLATIONS = {
    'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
    'director': '–†–µ–∂–∏—Å—Å—ë—Ä',
    'country': '–°—Ç—Ä–∞–Ω–∞',
    'genres': '–ñ–∞–Ω—Ä—ã',
    'keywords': '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞',
    'actors': '–ê–∫—Ç—ë—Ä—ã',
    'date': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø—É—Å–∫–∞',
    'sort': '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
}

router = Router()
data_provider = DataProvider()

sort_by: dict[str, str] = {'rating': '–†–µ–π—Ç–∏–Ω–≥', 'release_date': '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞', 'revenue': '–°—É–º–º–∞ —Å–±–æ—Ä–æ–≤'}
sort_in: dict[str, str] = {'DESC': '–ø–æ —É–±—ã–≤–∞–Ω–∏—é', 'ASC': '–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é'}

class States(StatesGroup):
    started = State()
    enter_param = State()
    search_params = State()
    enter_title = State()
    enter_interval = State()

async def handle_error(action: Message | CallbackQuery, state: FSMContext):
    user_id = action.from_user.id
    await state.set_state(States.started)
    await send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
    print(traceback.format_exc())
                
async def send_message(user_id: int | str, text: str, markup: InlineKeyboardMarkup | ReplyKeyboardMarkup = None, reply_to: int | str = None, document: FSInputFile = None):
    try:
        if not document:
            message = await bot.send_message(user_id, text, reply_markup=markup, reply_to_message_id=reply_to)
        else:
            message = await bot.send_document(user_id, document, caption=text, reply_markup=markup, reply_to_message_id=reply_to)
        return message
    except TelegramForbiddenError:
        pass
    except Exception:
        pass

async def edit_message(message: Message, text: str):
    try:
        if message:
            await message.edit_text(text)
    except Exception:
        pass

async def delete_message(message: Message):
    try:
        if message:
            await message.delete()
    except Exception:
        pass

@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext):
        user_id = message.from_user.id
        if not data_provider.db_request(f'SELECT * FROM users WHERE id = {user_id}'):
            data_provider.db_request(f'INSERT INTO users VALUES ({user_id})')
        data = await state.get_data()
        message_id = data.get('menu_message_id')
        if message_id is None:
            await send_message(user_id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!')
            message = await send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é')
            message_id = message.message_id
        await state.update_data(menu_message_id = message_id)
        await set_menu(message_id=message_id, user_id=user_id)

async def set_menu(call: CallbackQuery = None, state: FSMContext = None, message_id: int = None, user_id: int = None):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f'üîç –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º', callback_data='search')],
        [InlineKeyboardButton(text=f'‚ù§Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è', callback_data='favorite')],
        [InlineKeyboardButton(text='üìå –°–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ', callback_data=f'watchlist')],
        [InlineKeyboardButton(text='üåü –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞', callback_data=f'compilation')]
    ])
    if call:
        await delete_message(call.message)
        menu_message_id = await send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', markup)
        await state.update_data(menu_message_id = menu_message_id)
    else:
        try:
            await bot.edit_message_text(
                text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é',
                chat_id=user_id,
                message_id=message_id,
                reply_markup=markup
            )
        except TelegramBadRequest:
            pass

@router.callback_query(F.data == 'menu')
async def send_menu_call(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await set_menu(call, state)

@router.callback_query(F.data == 'search')
async def search(call: CallbackQuery, state: FSMContext):
    try:
        await set_parameters_panel(call, state)
    except Exception:
        await handle_error(call, state)

async def get_current_parameters_text(search_params: dict) -> str:
    text = '\n'
    if search_params.get('name'):
        text += f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {search_params['name']}\n"
    if search_params.get('director'):
        director_id = next(iter(search_params['director'].keys()))
        director_name = search_params['director'][director_id]
        text += f"üé• –†–µ–∂–∏—Å—Å—ë—Ä: {director_name}\n"
    if search_params.get('country'):
        country_id = next(iter(search_params['country'].keys()))
        country_name = search_params['country'][country_id]
        text += f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}\n"
    if search_params.get('genres'):
        genre_names = [name for _, name in search_params['genres'].items()]
        text += f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(genre_names)}\n"
    if search_params.get('genres-no'):
        genre_names = [name for _, name in search_params['genres-no'].items()]
        text += f"üé≠üö´ –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã: {', '.join(genre_names)}\n"
    if search_params.get('keywords'):
        keyword_names = [name for _, name in search_params['keywords'].items()]
        text += f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keyword_names)}\n"
    if search_params.get('keywords-no'):
        keyword_names = [name for _, name in search_params['keywords-no'].items()]
        text += f"üîëüö´ –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keyword_names)}\n"
    if search_params.get('actors'):
        actor_names = [name for _, name in search_params['actors'].items()]
        text += f"üë§ –ê–∫—Ç—ë—Ä—ã: {', '.join(actor_names)}\n"
    if search_params.get('date_gte') and search_params.get('date_lte'):
        text += f"üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã—Ö–æ–¥–∞: {search_params['date_gte']} - {search_params['date_lte']}\n"
    if search_params.get('sort_by'):
        sort_by_value = sort_by.get(search_params['sort_by'], search_params['sort_by'])
        sort_in_value = sort_in.get(search_params.get('sort_in', 'DESC'), 'DESC')
        text += f"üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_by_value} ({sort_in_value})\n"
    return text

async def set_parameters_panel(action: CallbackQuery | Message, state: FSMContext):
    data = await state.get_data()
    search_params = data.get('search_params', {})
    current_parameters_text = await get_current_parameters_text(search_params)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f'–ù–∞–∑–≤–∞–Ω–∏–µ', callback_data='set_title')],
        [InlineKeyboardButton(text=f'–†–µ–∂–∏—Å—Å—ë—Ä', callback_data='parameter_director')],
        [InlineKeyboardButton(text=f'–°—Ç—Ä–∞–Ω–∞', callback_data='parameter_country')],
        [InlineKeyboardButton(text='–ñ–∞–Ω—Ä—ã', callback_data=f'parameter_genres')],
        [InlineKeyboardButton(text=f'–ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã', callback_data='parameter_genres-no')],
        [InlineKeyboardButton(text=f'–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data='parameter_keywords')],
        [InlineKeyboardButton(text=f'–ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data='parameter_keywords-no')],
        [InlineKeyboardButton(text='–ê–∫—Ç—ë—Ä—ã', callback_data=f'parameter_actors')],
        [InlineKeyboardButton(text='–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞', callback_data=f'set_interval')],
        [InlineKeyboardButton(text='–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', callback_data=f'set_sorting')],
        [InlineKeyboardButton(text='üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data=f'start_search')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'menu')]
    ])
    text = f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {current_parameters_text}" if current_parameters_text else "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:"
    if isinstance(action, CallbackQuery):
        await bot.edit_message_text(
            text=text,
            chat_id=action.from_user.id,
            message_id=action.message.message_id,
            reply_markup=markup
        )
    else:
        menu_message_id = data.get('menu_message_id')
        await bot.delete_message(action.from_user.id, menu_message_id)
        message = await send_message(action.from_user.id, text, markup)
        await state.update_data(menu_message_id = message.message_id)

@router.callback_query(F.data == 'set_title')
async def set_title(call: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(States.enter_title)
        await bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:",
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', callback_data='search')]]
            )
        )
    except Exception:
        await handle_error(call, state)

@router.message(States.enter_title)
async def enter_title_handler(message: Message, state: FSMContext):
    try:
        title = message.text.strip()
        if title:
            await state.update_data(param_type = 'title')
            data = await state.get_data()
            search_params = data.get('search_params', {})
            search_params['name'] = title
            await state.update_data(search_params=search_params)

            await set_parameters_panel(message, state)
    except Exception:
        await handle_error(message, state)

@router.callback_query(F.data == 'set_interval')
async def set_interval(call: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(param_type = 'interval')
        await state.set_state(States.enter_interval)
        await bot.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ì–ì–ì–ì.–ú–ú.–î–î-–ì–ì–ì–ì.–ú–ú.–î–î`\n\n–ü—Ä–∏–º–µ—Ä: `2000.01.01-2020.12.31`",
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', callback_data='search')]]
            )
        )
    except Exception:
        await handle_error(call, state)

@router.message(States.enter_interval)
async def enter_interval_handler(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        interval = message.text.strip()

        if re.match(r'^\d{4}\.\d{2}\.\d{2}-\d{4}\.\d{2}\.\d{2}$', interval):
            date_gte, date_lte = interval.split('-')
            date_gte = date_gte.replace('.', '-')
            date_lte = date_lte.replace('.', '-')

            data = await state.get_data()
            search_params = data.get('search_params', {})
            search_params['date_gte'] = date_gte
            search_params['date_lte'] = date_lte
            await state.update_data(search_params=search_params)

            await set_parameters_panel(message, state)

        else:
            await send_message(
                user_id,
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', callback_data='search')]]
                )
            )
    except Exception:
        await handle_error(message, state)

@router.callback_query(F.data.startswith('parameter_'))
async def select_parameter(call: CallbackQuery, state: FSMContext):
    try:
        param_type = call.data.split('_')[1]
        
        await state.update_data(param_type=param_type)
        await state.set_state(States.enter_param)

        await show_parameter_page(call, state)
    except Exception:
        await handle_error(call, state)

async def update_sort_panel_markup(action: Message | CallbackQuery, state: FSMContext) -> InlineKeyboardMarkup:
    user_id = action.from_user.id
    data = await state.get_data()
    sort_in_key = data.get('sort_in_key', 'DESC')
    sort_in_value = sort_in.get(sort_in_key)
    sort_by_key = data.get('sort_by_key', 'rating')
    sort_by_value = sort_by.get(sort_by_key)
    sort_message_id = data.get('sort_message_id')

    sort_by_dict = sort_by.copy()
    sort_by_dict[sort_by_key] = '‚úÖ ' + sort_by_value
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=sort_by_dict.get('rating'), callback_data=f'set_sort_by-rating')],
        [InlineKeyboardButton(text=sort_by_dict.get('release_date'), callback_data=f'set_sort_by-release_date')],
        [InlineKeyboardButton(text=sort_by_dict.get('revenue'), callback_data=f'set_sort_by-revenue')],
        [InlineKeyboardButton(text=f'–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {sort_in_value}', callback_data=f'change_sort_in')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', callback_data=f'search')],
    ])
    await bot.edit_message_reply_markup(chat_id=user_id, message_id=sort_message_id, reply_markup=markup)
    return markup

@router.callback_query(F.data.startswith('set_sort_by-'))
async def set_sort_py(call: CallbackQuery, state: FSMContext):
    sort_by_key = call.data.split('-')[1]
    data = await state.get_data()
    search_params = data.get('search_params', {})
    search_params['sort_by'] = sort_by_key
    await state.update_data(search_params=search_params)
    await state.update_data(sort_by_key = sort_by_key)
    await update_sort_panel_markup(call, state)

@router.callback_query(F.data == 'set_sorting')
async def set_sorting(call: CallbackQuery, state: FSMContext):
    await delete_message(call.message)
    try:
        user_id = call.from_user.id
        sort_message = await send_message(user_id, f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–ª–∞–∂–æ–∫ –≤–æ–∑–ª–µ –∏–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.')
        await state.update_data(sort_message_id = sort_message.message_id)
        await update_sort_panel_markup(call, state)
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data == 'change_sort_in')
async def change_sort_in(call: CallbackQuery, state: FSMContext):
    sort_keys = list(sort_in.keys())
    data = await state.get_data()
    sort_in_key = data.get('sort_in_key', 'DESC')
    new_sort_in_key = sort_keys[sort_keys.index(sort_in_key) - 1]
    search_params = data.get('search_params', {})
    search_params['sort_in'] = new_sort_in_key
    await state.update_data(search_params=search_params)
    await state.update_data(sort_in_key = new_sort_in_key)
    await update_sort_panel_markup(call, state)

@router.message(States.enter_param)
async def enter_parameter_value(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        param_type: str = data.get('param_type')
        menu_message_id = data.get('menu_message_id')
        param_value = message.text
        await bot.delete_message(user_id, menu_message_id)
        items = data_provider.get_params_by_page(param_type.split('-')[0], get_all=True)

        exists = param_value in [item.get('name') for item in items]
        if exists:
            item = next(({'id': item['id'], 'name': item['name']} for item in items if item['name'] == param_value), None)
            if item:
                await select_item(param_type, {item['id']: item['name']}, state)
                await show_parameter_page(message, state, param_value)
        else:
            relevant_items = []
            for item in items:
                if param_value.lower() in item['name'].lower():
                    relevant_items.append(item)

            if relevant_items:
                buttons = []
                for item in relevant_items:
                    buttons.append([
                        InlineKeyboardButton(
                            text=item['name'],
                            callback_data=f"select_{param_type}_{item['id']}_{item['name']}"
                        )
                    ])
                buttons.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', callback_data='search')])

                markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                await send_message(
                    user_id,
                    f'–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "{PARAMETER_TRANSLATIONS.get(param_type, param_type)}":',
                    markup
                )
            else:
                await send_message(user_id, "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception:
        await handle_error(message, state)

@router.callback_query(F.data == 'start_search')
async def start_search(call: CallbackQuery, state: FSMContext):
    await delete_message(call.message)
    try:
        user_id = call.from_user.id
        data = await state.get_data()
        search_params = data.get('search_params', {})

        genres_included = list(search_params.get('genres', {}).keys())
        genres_excluded = list(search_params.get('genres-no', {}).keys())
        keywords_included = list(search_params.get('keywords', {}).keys())
        keywords_excluded = list(search_params.get('keywords-no', {}).keys())
        actors = list(search_params.get('actors', {}).keys())
        director_dict = search_params.get('director', {})
        director = next(iter(director_dict.keys()), None) if director_dict else None
        country_dict = search_params.get('country', {})
        country = next(iter(country_dict.keys()), None) if country_dict else None

        movies = data_provider.search_movies(
            genres_included=genres_included,
            genres_excluded=genres_excluded,
            keywords_included=keywords_included,
            keywords_excluded=keywords_excluded,
            actors=actors,
            director=director,
            title_part=search_params.get('name'),
            country=country,
            release_date_gte=search_params.get('date_gte', '1895-12-28'),
            release_date_lte=search_params.get('date_lte', '2026-12-12'),
            order_by=search_params.get('sort_by', 'id'),
            order_dir=search_params.get('sort_in', 'DESC')
        )

        current_date = datetime.datetime.now().strftime('%Y-%m-%d')
        data_provider.update_query(
            user_id,
            search_params.get('name', None),
            search_params.get('date_gte', '1895-12-28'),
            search_params.get('date_lte', '2026-12-12'),
            country,
            director,
            current_date,
            actors,
            genres_included,
            genres_excluded,
            keywords_included,
            keywords_excluded
        )

        if movies:
            await state.update_data(movies=movies, current_index=0)
            await show_movie(user_id, state)
        else:
            menu_message_id = data.get(menu_message_id)
            bot.delete_message(user_id, menu_message_id)
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data=f'menu')]
            ])
            menu_message = await send_message(user_id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.", markup)
            await state.update_data(menu_message_id = menu_message.message_id)
    except Exception:
        await handle_error(call, state)

async def get_movie_markup(movie_id: int, movie_index: int, movies_len: int, user_id: int, show_details: bool = False):
    is_favorite = data_provider.is_in_list(user_id, movie_id, 'favorite_movies')
    is_watchlist = data_provider.is_in_list(user_id, movie_id, 'watchlist')
    
    inline_keyboard_first = []
    if movie_index > 0:
        inline_keyboard_first.append(InlineKeyboardButton(text='‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='prev_movie'))
    if movie_index < movies_len:
        inline_keyboard_first.append(InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', callback_data='next_movie'))

    markup = InlineKeyboardMarkup(inline_keyboard=[
        inline_keyboard_first,
        [
            InlineKeyboardButton(
                text='‚ù§Ô∏è –£–±—Ä–∞—Ç—å –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è' if is_favorite else '‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è',
                callback_data=f"toggle_favorite_{movie_id}"
            ),
            InlineKeyboardButton(
                text='üìå –£–±—Ä–∞—Ç—å –∏–∑ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ' if is_watchlist else 'üìå –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ',
                callback_data=f"toggle_watchlist_{movie_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text='–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏' if show_details else 'üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                callback_data=f"toggle_details_{movie_id}"
            ),
        ],
        [InlineKeyboardButton(text='‚≠ê –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É', callback_data=f"rate_movie_{movie_id}")],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'menu')]
    ])
    return markup
    
async def show_movie(user_id: int, state: FSMContext, show_details: bool = False, update_score: bool = False):
    data = await state.get_data()
    await state.update_data(show_details = show_details)
    movies = data.get('movies', [])
    current_index = data.get('current_index', 0)

    if not movies:
        await bot.send_message(user_id, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    movie: dict = movies[current_index]
    rating = str(movie['rating'] if not update_score else data_provider.get_movie_rating(movie.get('id')))
    score = data_provider.get_movie_score(movie.get('id'), user_id)
    if score:
        rating += f' (–≤–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {score})'
    text = (
        f"üé¨ <b>{movie['name']}</b>\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {movie['release_date']}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {data_provider.get_country_name(movie['release_country'])}\n"
        f"üé• –†–µ–∂–∏—Å—Å—ë—Ä: {data_provider.get_director_name(movie['director'])}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {movie['overview']}"
    )
    
    if show_details:
        text = (
            f"\nüë§ –ê–∫—Ç—ë—Ä—ã: {', '.join(data_provider.get_actor_names(movie['actors']))}\n"
            f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(data_provider.get_genre_names(movie['genres']))}\n"
            f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(data_provider.get_keyword_names(movie['keywords']))}\n"
            f"üíµ –°—É–º–º–∞ —Å–±–æ—Ä–æ–≤: {movie['revenue']}\n"
        )

    markup = await get_movie_markup(movie.get('id'), current_index, len(movies) - 1, user_id, show_details)

    movie_photos: list = data.get('movie_photos', [])
    if current_index < len(movie_photos) and movie_photos:
        photo = movie_photos[current_index]
        file_bin = None
    else:
        file_bin = data_provider.get_image_bin(movie.get('poster_link'))
        if file_bin:
            file_bin = await compress_image(file_bin)

    if file_bin:
        photo = BufferedInputFile(file_bin.getvalue(), filename='photo.png')
        movie_photos.append(photo)
        await state.update_data(movie_photos=movie_photos)

    if 'movie_message_id' not in data:
        message = await bot.send_photo(user_id, photo, caption=text, reply_markup=markup)
        await state.update_data(movie_message_id=message.message_id)
    else:
        media = InputMediaPhoto(media=photo, caption=text)
        await bot.edit_message_media(
            chat_id=user_id,
            message_id=data.get('movie_message_id'),
            media=media,
            reply_markup=markup
        )

async def compress_image(byte_arr, quality=50):
    with Image.open(io.BytesIO(byte_arr)) as img:
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='JPEG', quality=quality)
        img_byte_arr.seek(0)
        return img_byte_arr
    
@router.callback_query(F.data.startswith('rate_movie_'))
async def rate_movie(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        movie_id = int(call.data.split('_')[2])
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='1Ô∏è‚É£', callback_data=f"set_score_{movie_id}_1"),
                InlineKeyboardButton(text='2Ô∏è‚É£', callback_data=f"set_score_{movie_id}_2"),
                InlineKeyboardButton(text='3Ô∏è‚É£', callback_data=f"set_score_{movie_id}_3"),
                InlineKeyboardButton(text='4Ô∏è‚É£', callback_data=f"set_score_{movie_id}_4"),
                InlineKeyboardButton(text='5Ô∏è‚É£', callback_data=f"set_score_{movie_id}_5"),
            ],
            [
                InlineKeyboardButton(text='6Ô∏è‚É£', callback_data=f"set_score_{movie_id}_6"),
                InlineKeyboardButton(text='7Ô∏è‚É£', callback_data=f"set_score_{movie_id}_7"),
                InlineKeyboardButton(text='8Ô∏è‚É£', callback_data=f"set_score_{movie_id}_8"),
                InlineKeyboardButton(text='9Ô∏è‚É£', callback_data=f"set_score_{movie_id}_9"),
                InlineKeyboardButton(text='üîü', callback_data=f"set_score_{movie_id}_10"),
            ]
        ])

        await bot.edit_message_caption(
            caption='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ñ–∏–ª—å–º–∞',
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data.startswith('set_score_'))
async def set_score(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        movie_id = int(call.data.split('_')[2])
        score = int(call.data.split('_')[3])
        data_provider.set_movie_score(user_id, movie_id, score)
        data = await state.get_data()

        await show_movie(user_id, state, show_details=data.get('show_details', False), update_score=True)
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data.startswith('toggle_details_'))
async def toggle_details(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        movie_id = int(call.data.split('_')[2])
        data = await state.get_data()
        current_index = data.get('current_index', 0)
        movies = data.get('movies', [])
        current_movie = movies[current_index]

        if current_movie['id'] == movie_id:
            show_details = not data.get('show_details', False)
            await state.update_data(show_details=show_details)
            await show_movie(user_id, state, show_details)
    except Exception:
        await handle_error(call, state)

async def show_parameter_page(action: CallbackQuery | Message, state: FSMContext, last_value: str = None):
    data = await state.get_data()
    param_type = data.get('param_type')
    param_page = data.get('param_page', 0)
    search_params = data.get('search_params', {})
    param_type_common = param_type.split('-')[0]
    param_name = PARAMETER_TRANSLATIONS.get(param_type_common, param_type)
    if len(param_type.split('-')) > 1:
        param_name = "–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ " + param_name.lower()

    items = data_provider.get_params_by_page(param_type_common, param_page)

    buttons = []
    for item in items:
        item_id = item['id']
        item_name = item['name']
        is_selected = item_id in search_params.get(param_type, {})
        buttons.append([
            InlineKeyboardButton(
                text=f"{'‚úÖ ' if is_selected else ''}{item_name}",
                callback_data=f"select_{param_type}_{item_id}_{item_name}"
            )
        ])

    navigation_buttons = []
    if param_page > 0:
        navigation_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data=f"prev_page_{param_type}"))
    if len(items) == 10:
        navigation_buttons.append(InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è', callback_data=f"next_page_{param_type}"))
    buttons.append(navigation_buttons)
    buttons.append([InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='finish_selection')])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    if isinstance(action, CallbackQuery):
        await bot.edit_message_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ:",
            chat_id=action.from_user.id,
            message_id=action.message.message_id,
            reply_markup=markup
        )
    else:
        message = await send_message(action.from_user.id, f'–ó–Ω–∞—á–µ–Ω–∏–µ "{last_value}" –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä', markup)
        await state.update_data(menu_message_id=message.message_id)

@router.callback_query(F.data.startswith('select_'))
async def select_item_call(call: CallbackQuery, state: FSMContext):
    try:
        _, param_type, item_id, item_name = call.data.split('_')
        item = {int(item_id): item_name}
        await select_item(param_type, item, state)
        await show_parameter_page(call, state)

    except Exception:
        await handle_error(call, state)

async def select_item(param_type: str, item: dict, state: FSMContext):
    data = await state.get_data()
    search_params = data.get('search_params', {})
    selected_items: dict[str, dict] = search_params.get(param_type, {})

    if param_type in ('director', 'country'):
        search_params[param_type] = item
    else:
        item_id = next(iter(item.keys()))
        if item_id in selected_items:
            del selected_items[item_id]
        else:
            selected_items.update(item)
        search_params[param_type] = selected_items

    await state.update_data(search_params=search_params)

@router.callback_query(F.data.startswith('prev_page_'))
async def prev_page(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        param_page = data.get('param_page', 0)
        if param_page > 0:
            param_page -= 1
            await state.update_data(param_page=param_page)
            await show_parameter_page(call, state)
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data.startswith('next_page_'))
async def next_page(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        param_page = data.get('param_page', 0)
        param_page += 1
        await state.update_data(param_page=param_page)
        await show_parameter_page(call, state)
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data == 'finish_selection')
async def finish_selection(call: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(States.search_params)
        await set_parameters_panel(call, state)
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data.startswith('toggle_'))
async def toggle_list(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        list_name = call.data.split('_')[1]
        if list_name == 'favorite':
            list_name += '_movies'
        movie_id = int(call.data.split('_')[2])
        data = await state.get_data()
        current_index = data.get('current_index', 0)
        movies = data.get('movies', [])

        if data_provider.is_in_list(user_id, movie_id, list_name):
            data_provider.remove_from_list(user_id, movie_id, list_name)
        else:
            data_provider.add_to_list(user_id, movie_id, list_name)

        markup = await get_movie_markup(movie_id, current_index, len(movies) - 1, user_id)
        await bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data == 'next_movie')
async def next_movie(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        data = await state.get_data()
        movies = data.get('movies', [])
        current_index = data.get('current_index', 0)

        if current_index < len(movies) - 1:
            current_index += 1
            await state.update_data(current_index=current_index)
            await show_movie(user_id, state)
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data == 'prev_movie')
async def prev_movie(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        data = await state.get_data()
        current_index = data.get('current_index', 0)

        if current_index > 0:
            current_index -= 1
            await state.update_data(current_index=current_index)
            await show_movie(user_id, state)
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data == 'favorite')
async def show_favorite_movies(call: CallbackQuery, state: FSMContext):
    await delete_message(call.message)
    try:
        user_id = call.from_user.id
        movies = data_provider.get_movies_from_list(user_id, 'favorite_movies')
        if movies:
            await state.update_data(movies=movies, current_index=0)
            await show_movie(user_id, state)
        else:
            await send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ñ–∏–ª—å–º–æ–≤.")
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data == 'wathclist')
async def show_favorite_movies(call: CallbackQuery, state: FSMContext):
    await delete_message(call.message)
    try:
        user_id = call.from_user.id
        movies = data_provider.get_movies_from_list(user_id, 'watchlist')
        if movies:
            await state.update_data(movies=movies, current_index=0)
            await show_movie(user_id, state)
        else:
            await send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ.")
    except Exception:
        await handle_error(call, state)

@router.callback_query(F.data == 'compilation')
async def show_compilation(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        recommended_movies = data_provider.get_personal_recommendations(user_id)
        
        if not recommended_movies:
            await send_message(user_id, "–£ –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
            return

        await state.update_data(movies=recommended_movies, current_index=0)
        await show_movie(user_id, state)
    except Exception:
        await handle_error(call, state)